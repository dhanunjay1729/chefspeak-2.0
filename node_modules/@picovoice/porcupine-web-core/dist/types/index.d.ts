export declare type PorcupineKeywordCustom = {
    /** Base64 representation of a trained Porcupine keyword (`.ppn` file) */
    base64: string;
    /** An arbitrary label that you want Picovoice to report when the detection occurs */
    custom: string;
    /** Value in range [0,1] that trades off miss rate for false alarm */
    sensitivity?: number;
};
export declare type PorcupineKeywordBuiltin = {
    /** Name of a builtin keyword for the specific language (e.g. "Grasshopper" for English, or "Ananas" for German) */
    builtin: string;
    /** Value in range [0,1] that trades off miss rate for false alarm */
    sensitivity?: number;
};
export declare type PorcupineKeyword = PorcupineKeywordCustom | PorcupineKeywordBuiltin;
export declare type PorcupineWorkerRequestProcess = {
    command: 'process';
    inputFrame: Int16Array;
};
export declare type PorcupineWorkerRequestVoid = {
    command: 'reset' | 'pause' | 'resume' | 'release';
};
export declare type PorcupineWorkerRequestInit = {
    command: 'init';
    accessKey: string;
    keywords: Array<PorcupineKeyword | string>;
    start?: boolean;
};
export declare type PorcupineWorkerRequest = PorcupineWorkerRequestInit | PorcupineWorkerRequestProcess | PorcupineWorkerRequestVoid;
export declare type PorcupineWorkerResponseReady = {
    command: 'ppn-ready';
};
export declare type PorcupineWorkerResponseFailed = {
    command: 'ppn-failed';
    message: string;
};
export declare type PorcupineWorkerResponseKeyword = {
    command: 'ppn-keyword';
    keywordLabel: string;
};
export declare type PorcupineWorkerResponseError = {
    command: 'ppn-error';
    message: string;
};
export declare type PorcupineWorkerResponse = PorcupineWorkerResponseReady | PorcupineWorkerResponseFailed | PorcupineWorkerResponseKeyword | PorcupineWorkerResponseError;
export interface PorcupineEngine {
    /** Release all resources acquired by Porcupine */
    release(): Promise<void>;
    /** Process a single frame of 16-bit 16kHz PCM audio */
    process(frame: Int16Array): Promise<number>;
    /** The version of the Porcupine engine */
    readonly version: string;
    /** The sampling rate of audio expected by the Porcupine engine */
    readonly sampleRate: number;
    /** The frame length of audio expected by the Porcupine engine */
    readonly frameLength: number;
    /** Maps the keyword detection index (e.g. 0, 1) returned by Porcupine to the label (e.g. "Hey Pico", "Grasshopper") */
    readonly keywordLabels: Map<number, string>;
}
export interface PorcupineWorker extends Omit<Worker, 'postMessage'> {
    postMessage(command: PorcupineWorkerRequest): void;
}
export interface PorcupineWorkerFactory {
    create(accessKey: string, keywords: Array<PorcupineKeyword | string> | PorcupineKeyword | string, keywordDetectionCallback?: (label: string) => void, processErrorCallback?: (error: string | Error) => void, start?: boolean): Promise<PorcupineWorker>;
}
//# sourceMappingURL=index.d.ts.map